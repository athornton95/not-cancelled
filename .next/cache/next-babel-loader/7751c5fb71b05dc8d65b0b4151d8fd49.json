{"ast":null,"code":"var _jsxFileName = \"/Users/alexandrathornton/Github/Outside/not-cancelled/components/Trails.js\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport UserInput from './UserInput';\nimport Link from 'next/link'; // import WeatherInfo from './WeatherInfo/WeatherInfo'\n\nclass Trails extends Component {\n  constructor() {\n    super();\n\n    _defineProperty(this, \"findGeoCode\", async formData => {\n      try {\n        const searchURL = `https://cors-anywhere.herokuapp.com/https://maps.googleapis.com/maps/api/geocode/json?address=${formData.city},+${formData.state}&key=AIzaSyCxC93pv465QlIoGBJEWgafUpZwTJ_5tPg`;\n        const result = await fetch(searchURL);\n        const parsedResponse = await result.json();\n        console.log(`${parsedResponse} is the parsed response`);\n\n        if (result.status === 200) {\n          this.setState({\n            lat: parsedResponse.results[0].geometry.location.lat,\n            lng: parsedResponse.results[0].geometry.location.lng,\n            city: formData.city,\n            state: formData.state,\n            minLength: formData.minLength,\n            maxLength: formData.maxLength,\n            difficulty: formData.difficulty\n          });\n        }\n\n        console.log(this.state);\n        this.findTrails();\n      } catch (err) {\n        console.log(err);\n      }\n    });\n\n    _defineProperty(this, \"findTrails\", async () => {\n      console.log(this.state.maxLength);\n\n      try {\n        const searchURL = `https://www.hikingproject.com/data/get-trails?lat=${this.state.lat}&lon=${this.state.lng}&minLength=${this.state.minLength}&maxDistance=10&key=200465360-942e3fb792b81fa531e25b7484cbc0f9`;\n        const result = await fetch(searchURL);\n        const parsedResponse = await result.json();\n\n        if (result.status === 200) {\n          if (this.state.difficulty === '') {\n            this.setState({\n              trails: parsedResponse.trails.filter(trails => trails.length < this.state.maxLength)\n            });\n          } else {\n            this.setState({\n              trails: parsedResponse.trails.filter(trails => trails.length < this.state.maxLength && trails.difficulty === this.state.difficulty)\n            });\n          }\n        }\n      } catch (err) {\n        console.log(err);\n      }\n    });\n\n    this.state = {\n      lat: '',\n      lng: '',\n      city: '',\n      state: '',\n      trails: [],\n      minLength: '',\n      maxLength: '',\n      difficulty: ''\n    };\n  }\n\n  render(formData) {\n    //     console.log(this.state.trails)\n    //     // console.log(formData)\n    //     console.log(this.state.lat, this.state.lng, 'IN TRAILS INFO')\n    console.log(trails);\n    const trailList = this.state.trails.map(trail => {\n      return (// <div className = 'eachTrail'>\n        //     <div>\n        //          <h4>{trail.name}</h4> \n        //     </div>\n        //      <div>\n        //         <p>{trail.location}</p> \n        //      </div>\n        //     <div className = 'mainTrailInfo'>\n        //         <p>{trail.length} miles</p>\n        //      </div>\n        //     <div>\n        //         <p>peak elevation: {trail.high}</p>\n        //     </div>\n        //     <div>\n        //         <p>rating: {trail.stars} stars</p>\n        //     </div>\n        //     <div>\n        //         <p><a href = {trail.url} target=\"_blank\">more info</a></p>\n        //     </div>\n        // </div>\n        __jsx(\"ul\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 17\n          }\n        }, __jsx(\"li\", {\n          key: trail.id,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 13\n          }\n        }, __jsx(Link, {\n          href: \"/p/[id]\",\n          as: `/p/${trail.id}`,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 17\n          }\n        }, __jsx(\"a\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 17\n          }\n        }, trail.name))))\n      );\n    }); // this.state.trails.map((trail) => {\n    //     <ul>\n    //     <li key={trail.id}>\n    //         <Link href=\"/p/[id]\" as={`/p/${trail.id}`}>\n    //         {/* <Trails/> */}\n    //         <a>{trail.name}</a>\n    //     </Link>\n    //     </li>\n    //     </ul>\n    //     })\n    // console.log('this is the lat', this.state.lat, this.state.lng)\n\n    return __jsx(\"div\", {\n      className: \"whatIsThisDiv\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 13\n      }\n    }, __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }\n    }, __jsx(\"div\", {\n      className: \"userInput\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 21\n      }\n    }, __jsx(UserInput, {\n      findGeoCode: this.findGeoCode,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 25\n      }\n    })), __jsx(\"div\", {\n      className: \"trailList\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 19\n      }\n    }, trailList)));\n  }\n\n}\n\nexport default Trails;","map":{"version":3,"sources":["/Users/alexandrathornton/Github/Outside/not-cancelled/components/Trails.js"],"names":["React","Component","UserInput","Link","Trails","constructor","formData","searchURL","city","state","result","fetch","parsedResponse","json","console","log","status","setState","lat","results","geometry","location","lng","minLength","maxLength","difficulty","findTrails","err","trails","filter","length","render","trailList","map","trail","id","name","findGeoCode"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport UserInput from './UserInput';\nimport Link from 'next/link'\n// import WeatherInfo from './WeatherInfo/WeatherInfo'\n\n\nclass Trails extends Component {\n    constructor(){\n        super();\n        this.state = {\n            lat: '',\n            lng: '',\n            city: '',\n            state: '',\n            trails: [],\n            minLength: '',\n            maxLength: '',\n            difficulty: '',\n        }\n    }\n\n    findGeoCode = async (formData) => {\n        try{\n        const searchURL = `https://cors-anywhere.herokuapp.com/https://maps.googleapis.com/maps/api/geocode/json?address=${formData.city},+${formData.state}&key=AIzaSyCxC93pv465QlIoGBJEWgafUpZwTJ_5tPg`\n        const result = await fetch(searchURL)\n        const parsedResponse = await result.json();\n        console.log(`${parsedResponse} is the parsed response`);\n        if(result.status === 200){\n            this.setState({\n                lat: parsedResponse.results[0].geometry.location.lat,\n                lng: parsedResponse.results[0].geometry.location.lng,\n                city: formData.city,\n                state: formData.state,\n                minLength: formData.minLength,\n                maxLength: formData.maxLength,\n                difficulty: formData.difficulty\n            })\n        }\n        console.log(this.state)\n        this.findTrails();\n        }catch(err){\n            console.log(err)\n        }\n    }\n    findTrails = async () => {\n        console.log(this.state.maxLength)\n        try{\n        const searchURL = `https://www.hikingproject.com/data/get-trails?lat=${this.state.lat}&lon=${this.state.lng}&minLength=${this.state.minLength}&maxDistance=10&key=200465360-942e3fb792b81fa531e25b7484cbc0f9`\n        const result = await fetch(searchURL);\n        const parsedResponse = await result.json();\n        if(result.status === 200){\n            if(this.state.difficulty === ''){\n                this.setState({\n                    trails: parsedResponse.trails.filter(trails => trails.length < this.state.maxLength)\n                }) \n            } else {\n                this.setState({\n                    trails: parsedResponse.trails.filter(trails => trails.length < this.state.maxLength && trails.difficulty === this.state.difficulty)\n                })\n            }\n        }\n        }catch(err){\n            console.log(err);\n        }\n    }\n\n    render(formData){\n    //     console.log(this.state.trails)\n    //     // console.log(formData)\n    //     console.log(this.state.lat, this.state.lng, 'IN TRAILS INFO')\n    console.log(trails);\n        const trailList = this.state.trails.map((trail) => {\n            return (\n                // <div className = 'eachTrail'>\n                //     <div>\n                //          <h4>{trail.name}</h4> \n                //     </div>\n                //      <div>\n                //         <p>{trail.location}</p> \n                //      </div>\n                //     <div className = 'mainTrailInfo'>\n                //         <p>{trail.length} miles</p>\n                //      </div>\n                //     <div>\n                //         <p>peak elevation: {trail.high}</p>\n                //     </div>\n                //     <div>\n                //         <p>rating: {trail.stars} stars</p>\n                //     </div>\n                //     <div>\n                //         <p><a href = {trail.url} target=\"_blank\">more info</a></p>\n                //     </div>\n                // </div>\n                <ul>\n            <li key={trail.id}>\n                <Link href=\"/p/[id]\" as={`/p/${trail.id}`}>\n                {/* <Trails/> */}\n                <a>{trail.name}</a>\n            </Link>\n            </li>\n            </ul>\n            )\n        })\n\n        // this.state.trails.map((trail) => {\n        //     <ul>\n        //     <li key={trail.id}>\n        //         <Link href=\"/p/[id]\" as={`/p/${trail.id}`}>\n        //         {/* <Trails/> */}\n        //         <a>{trail.name}</a>\n        //     </Link>\n        //     </li>\n        //     </ul>\n        //     })\n        // console.log('this is the lat', this.state.lat, this.state.lng)\n        return(\n            <div className = 'whatIsThisDiv'>\n                <div>\n                    <div className = 'userInput'>\n                        <UserInput findGeoCode = {this.findGeoCode}/>\n                    </div>\n                {/* {this.state.lat !== '' ?\n                    <div className = 'weather'>\n                        <WeatherInfo lat = {this.state.lat} lng = {this.state.lng} city = {this.state.city} />\n                    </div>\n                :\n                null\n                }\n                {this.state.lng !== ''?\n                    <div className = 'breweries'>\n                        <Breweries lat = {this.state.lat} lng = {this.state.lng} city = {this.state.city}/>\n                    </div>\n                :\n                null\n                } */}\n                {/* </div>\n                {this.state.lng !== '' ?\n                <div className = 'trailInfo'>\n                    <h2>Hiking Trails Near {this.state.city}, {this.state.state}</h2>\n                    <div className = 'trailList'>\n                    {trailList}\n                    </div>\n                </div>\n                :\n                null\n                }\n                 */}\n                  <div className = 'trailList'>\n                    {trailList}\n                    </div>\n            </div>\n            </div>\n        )\n    }\n}\n\n\nexport default Trails;"]},"metadata":{},"sourceType":"module"}